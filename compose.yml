services:
  app:
    build:
      context: .
      dockerfile: Dockerfile
    user: "appuser" # Use the user created in Dockerfile
    volumes:
      # Mount the whole project directory for development
      - .:/app
      # Mount the docker socket to allow app to control docker
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      - PUID=911
      - PGID=911
      - GROUP_ID=108 # Add this line
      - LLM_API_BASE=http://ollama:11434/v1
      # Set PYTHONPATH to ensure imports work correctly from the project root
      - PYTHONPATH=/app/src
      - DOCKER_CONTAINER=true
    depends_on:
      ollama:
        condition: service_healthy
    ports:
      - "8000:8000"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://ollama:11434"]
      interval: 10s
      timeout: 5s
      retries: 5

  ollama:
    image: ollama/ollama
    ports:
      - "11435:11434"
    volumes:
      - ollama_data:/root/.ollama
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: all
              capabilities: [gpu]
    healthcheck:
      test: ["CMD", "ollama", "ps"]
      interval: 10s
      timeout: 5s
      retries: 5

  blender_runner:
    build:
      context: ./blender
      dockerfile: Dockerfile.custom
    runtime: nvidia # Add this for GPU support
    volumes:
      # Mount the workspace to share scripts and outputs
      - ./workspace:/workspace
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: all
              capabilities: [gpu]
    # No command needed, as the image handles its own entrypoint.

volumes:
  ollama_data: