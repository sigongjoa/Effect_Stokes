# Use an NVIDIA CUDA runtime image as the base
FROM nvidia/cuda:12.2.0-runtime-ubuntu22.04

# Set environment variables
ENV DEBIAN_FRONTEND=noninteractive
ENV BLENDER_VERSION=3.6.5
ENV BLENDER_DOWNLOAD_URL=https://download.blender.org/release/Blender${BLENDER_VERSION%.*}/blender-${BLENDER_VERSION}-linux-x64.tar.xz

# Install necessary packages
RUN apt-get update && apt-get install -y --no-install-recommends \
    wget \
    bzip2 \
    tar \
    xz-utils \ 

    libxkbcommon-x11-0 \
    libxcb-icccm4 \
    libxcb-keysyms1 \
    libxcb-randr0 \
    libxcb-shape0 \
    libxcb-xfixes0 \
    libxcb-xinerama0 \
    libxcb-xinput0 \
    libxcb-xkb1 \
    libxrender1 \
    libxi6 \
    libxrandr2 \
    libxfixes3 \
    libxcursor1 \
    libxinerama1 \
    libxcomposite1 \
    libxdamage1 \
    libxext6 \
    libxmuu1 \
    libxpm4 \
    libxt6 \
    libglu1-mesa \
    libgl1-mesa-glx \
    libfontconfig1 \
    libfreetype6 \
    libjpeg-turbo8 \
    libpng16-16 \
    libtiff5 \
    libwebp7 \
    libopenexr25 \
    libsdl2-2.0-0 \
    libopenal1 \
    libsamplerate0 \
    libsndfile1 \
    libavcodec58 \
    libavdevice58 \
    libavformat58 \
    libavutil56 \
    libswresample3 \
    libswscale5 \
    && rm -rf /var/lib/apt/lists/*

# Download and extract Blender
RUN mkdir -p /opt/blender && \
    wget -q ${BLENDER_DOWNLOAD_URL} -O /tmp/blender.tar.xz && \
    tar -xf /tmp/blender.tar.xz -C /opt/blender --strip-components=1 && \
    rm /tmp/blender.tar.xz

# Create a symlink for blender executable
RUN ln -s /opt/blender/blender /usr/local/bin/blender

# Set a working directory for scripts and outputs
WORKDIR /app

# Ensure Python is available and install numpy for blender_fluid_visualizer.py
# The nvidia/cuda image usually comes with Python, but we might need to install pip
RUN apt-get update && apt-get install -y python3 python3-pip && rm -rf /var/lib/apt/lists/*
RUN pip install numpy

# No ENTRYPOINT needed here, as we will call blender directly from the host script
# using `blender --background --python ...`

